{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "deliveryQuote",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "paymentForExtraReceiverValue",
						"type": "uint256"
					}
				],
				"name": "SendEvent",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "deliveryHash",
						"type": "bytes32"
					}
				],
				"name": "deliveryAttempted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "attempted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "deliveryHash",
						"type": "bytes32"
					}
				],
				"name": "deliveryFailureBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "blockNumber",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "deliveryHash",
						"type": "bytes32"
					}
				],
				"name": "deliverySuccessBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "blockNumber",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDefaultDeliveryProvider",
				"outputs": [
					{
						"internalType": "address",
						"name": "deliveryProvider",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "chainId",
						"type": "uint16"
					}
				],
				"name": "getRegisteredWormholeRelayerContract",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "encodedExecutionParameters",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "deliveryProviderAddress",
						"type": "address"
					}
				],
				"name": "quoteDeliveryPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "nativePriceQuote",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "encodedExecutionInfo",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "deliveryProviderAddress",
						"type": "address"
					}
				],
				"name": "quoteEVMDeliveryPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "nativePriceQuote",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "targetChainRefundPerGasUnused",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					}
				],
				"name": "quoteEVMDeliveryPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "nativePriceQuote",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "targetChainRefundPerGasUnused",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "currentChainAmount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "deliveryProviderAddress",
						"type": "address"
					}
				],
				"name": "quoteNativeForChain",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "targetChainAmount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "chainId",
								"type": "uint16"
							},
							{
								"internalType": "bytes32",
								"name": "emitterAddress",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sequence",
								"type": "uint64"
							}
						],
						"internalType": "struct VaaKey",
						"name": "deliveryVaaKey",
						"type": "tuple"
					},
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "newReceiverValue",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "newEncodedExecutionParameters",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "newDeliveryProviderAddress",
						"type": "address"
					}
				],
				"name": "resend",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "chainId",
								"type": "uint16"
							},
							{
								"internalType": "bytes32",
								"name": "emitterAddress",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sequence",
								"type": "uint64"
							}
						],
						"internalType": "struct VaaKey",
						"name": "deliveryVaaKey",
						"type": "tuple"
					},
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "newReceiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newGasLimit",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "newDeliveryProviderAddress",
						"type": "address"
					}
				],
				"name": "resendToEvm",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "bytes32",
						"name": "targetAddress",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "paymentForExtraReceiverValue",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "encodedExecutionParameters",
						"type": "bytes"
					},
					{
						"internalType": "uint16",
						"name": "refundChain",
						"type": "uint16"
					},
					{
						"internalType": "bytes32",
						"name": "refundAddress",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "deliveryProviderAddress",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "chainId",
								"type": "uint16"
							},
							{
								"internalType": "bytes32",
								"name": "emitterAddress",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sequence",
								"type": "uint64"
							}
						],
						"internalType": "struct VaaKey[]",
						"name": "vaaKeys",
						"type": "tuple[]"
					},
					{
						"internalType": "uint8",
						"name": "consistencyLevel",
						"type": "uint8"
					}
				],
				"name": "send",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "bytes32",
						"name": "targetAddress",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "paymentForExtraReceiverValue",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "encodedExecutionParameters",
						"type": "bytes"
					},
					{
						"internalType": "uint16",
						"name": "refundChain",
						"type": "uint16"
					},
					{
						"internalType": "bytes32",
						"name": "refundAddress",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "deliveryProviderAddress",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "keyType",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "encodedKey",
								"type": "bytes"
							}
						],
						"internalType": "struct MessageKey[]",
						"name": "messageKeys",
						"type": "tuple[]"
					},
					{
						"internalType": "uint8",
						"name": "consistencyLevel",
						"type": "uint8"
					}
				],
				"name": "send",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "targetAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "refundChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "refundAddress",
						"type": "address"
					}
				],
				"name": "sendPayloadToEvm",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "targetAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					}
				],
				"name": "sendPayloadToEvm",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "targetAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "paymentForExtraReceiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "refundChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "refundAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "deliveryProviderAddress",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "chainId",
								"type": "uint16"
							},
							{
								"internalType": "bytes32",
								"name": "emitterAddress",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sequence",
								"type": "uint64"
							}
						],
						"internalType": "struct VaaKey[]",
						"name": "vaaKeys",
						"type": "tuple[]"
					},
					{
						"internalType": "uint8",
						"name": "consistencyLevel",
						"type": "uint8"
					}
				],
				"name": "sendToEvm",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "targetAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "paymentForExtraReceiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "refundChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "refundAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "deliveryProviderAddress",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "keyType",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "encodedKey",
								"type": "bytes"
							}
						],
						"internalType": "struct MessageKey[]",
						"name": "messageKeys",
						"type": "tuple[]"
					},
					{
						"internalType": "uint8",
						"name": "consistencyLevel",
						"type": "uint8"
					}
				],
				"name": "sendToEvm",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "targetAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "chainId",
								"type": "uint16"
							},
							{
								"internalType": "bytes32",
								"name": "emitterAddress",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sequence",
								"type": "uint64"
							}
						],
						"internalType": "struct VaaKey[]",
						"name": "vaaKeys",
						"type": "tuple[]"
					}
				],
				"name": "sendVaasToEvm",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "targetChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "targetAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "receiverValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "chainId",
								"type": "uint16"
							},
							{
								"internalType": "bytes32",
								"name": "emitterAddress",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sequence",
								"type": "uint64"
							}
						],
						"internalType": "struct VaaKey[]",
						"name": "vaaKeys",
						"type": "tuple[]"
					},
					{
						"internalType": "uint16",
						"name": "refundChain",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "refundAddress",
						"type": "address"
					}
				],
				"name": "sendVaasToEvm",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "sequence",
						"type": "uint64"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getDefaultDeliveryProvider()": {
					"returns": {
						"deliveryProvider": "The address of (the default delivery provider)'s contract on this source   chain. This must be a contract that implements IDeliveryProvider."
					}
				},
				"quoteDeliveryPrice(uint16,uint256,bytes,address)": {
					"params": {
						"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"targetChain": "in Wormhole Chain ID format"
					},
					"returns": {
						"encodedExecutionInfo": "encoded information on how the delivery will be executed        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`             (which is the amount of target chain currency that will be refunded per unit of gas unused,              if a refundAddress is specified)",
						"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay"
					}
				},
				"quoteEVMDeliveryPrice(uint16,uint256,uint256)": {
					"params": {
						"gasLimit": "gas limit with which to call `targetAddress`.",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"targetChain": "in Wormhole Chain ID format"
					},
					"returns": {
						"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay",
						"targetChainRefundPerGasUnused": "amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified.         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain."
					}
				},
				"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": {
					"params": {
						"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"gasLimit": "gas limit with which to call `targetAddress`.",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"targetChain": "in Wormhole Chain ID format"
					},
					"returns": {
						"nativePriceQuote": "Price, in units of current chain currency, that the delivery provider charges to perform the relay",
						"targetChainRefundPerGasUnused": "amount of target chain currency that will be refunded per unit of gas unused,         if a refundAddress is specified         Note: This value can be overridden by the delivery provider on the target chain. The returned value here should be considered to be a         promise by the delivery provider of the amount of refund per gas unused that will be returned to the refundAddress at the target chain.         If a delivery provider decides to override, this will be visible as part of the emitted Delivery event on the target chain."
					}
				},
				"quoteNativeForChain(uint16,uint256,address)": {
					"params": {
						"currentChainAmount": "The value that `paymentForExtraReceiverValue` will be set to",
						"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"targetChain": "in Wormhole Chain ID format"
					},
					"returns": {
						"targetChainAmount": "The amount such that if `targetAddress` will be called with `msg.value` equal to         receiverValue + targetChainAmount"
					}
				},
				"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": {
					"params": {
						"deliveryVaaKey": "VaaKey identifying the wormhole message containing the        previously published delivery instructions",
						"newDeliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"newEncodedExecutionParameters": "new encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
						"newReceiverValue": "new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"targetChain": "The target chain that the original delivery targeted. Must match targetChain from original delivery instructions"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing redelivery instructions"
					}
				},
				"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": {
					"params": {
						"deliveryVaaKey": "VaaKey identifying the wormhole message containing the        previously published delivery instructions",
						"newDeliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"newGasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request",
						"newReceiverValue": "new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"targetChain": "The target chain that the original delivery targeted. Must match targetChain from original delivery instructions"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing redelivery instructions"
					}
				},
				"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": {
					"params": {
						"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
						"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
						"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
						"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"refundAddress": "The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format",
						"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
						"targetAddress": "address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format",
						"targetChain": "in Wormhole Chain ID format",
						"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing delivery instructions"
					}
				},
				"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": {
					"params": {
						"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
						"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"encodedExecutionParameters": "encoded information on how to execute delivery that may impact pricing        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`",
						"messageKeys": "Additional messagess to pass in as parameter in call to `targetAddress`",
						"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
						"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"refundAddress": "The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format",
						"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
						"targetAddress": "address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format",
						"targetChain": "in Wormhole Chain ID format"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing delivery instructions"
					}
				},
				"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": {
					"params": {
						"gasLimit": "gas limit with which to call `targetAddress`.",
						"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
						"targetChain": "in Wormhole Chain ID format"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing delivery instructions"
					}
				},
				"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": {
					"params": {
						"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
						"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"refundAddress": "The address on `refundChain` to deliver any refund to",
						"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
						"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
						"targetChain": "in Wormhole Chain ID format"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing delivery instructions"
					}
				},
				"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": {
					"params": {
						"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
						"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
						"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
						"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"refundAddress": "The address on `refundChain` to deliver any refund to",
						"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
						"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
						"targetChain": "in Wormhole Chain ID format",
						"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing delivery instructions"
					}
				},
				"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": {
					"params": {
						"consistencyLevel": "Consistency level with which to publish the delivery instructions - see        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels",
						"deliveryProviderAddress": "The address of the desired delivery provider's implementation of IDeliveryProvider",
						"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
						"messageKeys": "Additional messagess to pass in as parameter in call to `targetAddress`",
						"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
						"paymentForExtraReceiverValue": "amount (in current chain currency units) to spend on extra receiverValue        (in addition to the `receiverValue` specified)",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"refundAddress": "The address on `refundChain` to deliver any refund to",
						"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
						"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
						"targetChain": "in Wormhole Chain ID format"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing delivery instructions"
					}
				},
				"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": {
					"params": {
						"gasLimit": "gas limit with which to call `targetAddress`.",
						"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
						"targetChain": "in Wormhole Chain ID format",
						"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing delivery instructions"
					}
				},
				"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": {
					"params": {
						"gasLimit": "gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the        `targetChainRefundPerGasUnused` rate quoted by the delivery provider",
						"payload": "arbitrary bytes to pass in as parameter in call to `targetAddress`",
						"receiverValue": "msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)",
						"refundAddress": "The address on `refundChain` to deliver any refund to",
						"refundChain": "The chain to deliver any refund to, in Wormhole Chain ID format",
						"targetAddress": "address to call on targetChain (that implements IWormholeReceiver)",
						"targetChain": "in Wormhole Chain ID format",
						"vaaKeys": "Additional VAAs to pass in as parameter in call to `targetAddress`"
					},
					"returns": {
						"sequence": "sequence number of published VAA containing delivery instructions"
					}
				}
			},
			"title": "IWormholeRelayerSend",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"deliveryAttempted(bytes32)": {
					"notice": "Returns true if a delivery has been attempted for the given deliveryHash Note: invalid deliveries where the tx reverts are not considered attempted"
				},
				"deliveryFailureBlock(bytes32)": {
					"notice": "block number of the latest attempt to execute a delivery that failed"
				},
				"deliverySuccessBlock(bytes32)": {
					"notice": "block number at which a delivery was successfully executed"
				},
				"getDefaultDeliveryProvider()": {
					"notice": "Returns the address of the current default delivery provider"
				},
				"quoteDeliveryPrice(uint16,uint256,bytes,address)": {
					"notice": "Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`"
				},
				"quoteEVMDeliveryPrice(uint16,uint256,uint256)": {
					"notice": "Returns the price to request a relay to chain `targetChain`, using the default delivery provider"
				},
				"quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": {
					"notice": "Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`"
				},
				"quoteNativeForChain(uint16,uint256,address)": {
					"notice": "Returns the (extra) amount of target chain currency that `targetAddress` will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`"
				},
				"resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": {
					"notice": "Requests a previously published delivery instruction to be redelivered This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - (For EVM_V1) newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`"
				},
				"resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": {
					"notice": "Requests a previously published delivery instruction to be redelivered (e.g. with a different delivery provider) This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`*** This will only be able to succeed if the following is true **         - newGasLimit >= gas limit of the old instruction         - newReceiverValue >= receiver value of the old instruction"
				},
				"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": {
					"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue"
				},
				"send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": {
					"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!"
				},
				"sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": {
					"notice": "Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function with `refundChain` and `refundAddress` as parameters"
				},
				"sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": {
					"notice": "Publishes an instruction for the default delivery provider to relay a payload to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`"
				},
				"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": {
					"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue"
				},
				"sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": {
					"notice": "Publishes an instruction for the delivery provider at `deliveryProviderAddress` to relay a payload and external messages specified by `messageKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei. Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue Note: MessageKeys can specify wormhole messages (VaaKeys) or other types of messages (ex. USDC CCTP attestations). Ensure the selected DeliveryProvider supports all the MessageKey.keyType values specified or it will not be delivered!"
				},
				"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": {
					"notice": "Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)` Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function with `refundChain` and `refundAddress` as parameters"
				},
				"sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": {
					"notice": "Publishes an instruction for the default delivery provider to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain` with gas limit `gasLimit` and `msg.value` equal to `receiverValue` Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain` `targetAddress` must implement the IWormholeReceiver interface This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`"
				}
			},
			"notice": "The interface to request deliveries",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"GrayZone/src/interfaces/IWormholeRelayer.sol": "IWormholeRelayerSend"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"GrayZone/src/interfaces/IWormholeRelayer.sol": {
			"keccak256": "0xaa4afc2866e54ed9c9540e8ac4872d6ab9527884243087997a7d00f444004efc",
			"license": "Apache 2",
			"urls": [
				"bzz-raw://1f96f1d944798269dca0afed8cf3c64fda0493c375170783692d0f506bab20af",
				"dweb:/ipfs/QmXwQBXgvBMX8z8bd6excB5x9wHhnkRZQVmgswmFmqk9cu"
			]
		}
	},
	"version": 1
}